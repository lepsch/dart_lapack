import 'dart:math';

import 'package:lapack/src/format_extensions.dart';
import 'package:test/test.dart';

void main() {
  group('Format Specifier Extensions', () {
    // F, E, D, G are for reals (fixed-point, exponential, double, general)

    group('Floating Point', () {
      test('F', () {
        expect((-10.0).f12_3, '     -10.000');
        expect((-1.0).f12_3, '      -1.000');
        expect(0.0.f12_3, '       0.000');
        expect(1.0.f12_3, '       1.000');
        expect(10.0.f12_3, '      10.000');
        expect(100.0.f12_3, '     100.000');
        expect(1000.0.f12_3, '    1000.000');
        expect(10000.0.f12_3, '   10000.000');
        expect(100000.0.f12_3, '  100000.000');
        expect(1000000.0.f12_3, ' 1000000.000');
        expect(10000000.0.f12_3, '10000000.000');
        expect(100000000.0.f12_3, '************');
        expect(1.0e7.f12_3, '10000000.000');
        expect(1.0e8.f12_3, '************');
        expect(pi.f12_3, '       3.142');
        expect((1 / 3).f12_3, '       0.333');
        expect(1.1754943508e-38.f12_3, '       0.000');
        expect(3.4028234664e38.f12_3, '************');
      });

      test('E', () {
        expect((-10.0).e12_3, '  -0.100E+02');
        expect((-1.0).e12_3, '  -0.100E+01');
        expect((-0.0).e12_3, '  -0.000E+00');
        expect(0.0.e12_3, '   0.000E+00');
        expect(1.0.e12_3, '   0.100E+01');
        expect(10.0.e12_3, '   0.100E+02');
        expect(100.0.e12_3, '   0.100E+03');
        expect(1000.0.e12_3, '   0.100E+04');
        expect(10000.0.e12_3, '   0.100E+05');
        expect(100000.0.e12_3, '   0.100E+06');
        expect(1000000.0.e12_3, '   0.100E+07');
        expect(10000000.0.e12_3, '   0.100E+08');
        expect(100000000.0.e12_3, '   0.100E+09');
        expect(1.0e7.e12_3, '   0.100E+08');
        expect(1.0e8.e12_3, '   0.100E+09');
        expect(pi.e12_3, '   0.314E+01');
        expect((1 / 3).e12_3, '   0.333E+00');
        expect(1.1754943508e-38.e12_3, '   0.118E-37');
        expect(3.4028234664e38.e12_3, '   0.340E+39');
        expect(2.2250738585072014e-308.e16_6, '    0.222507-307');
        expect(1.7976931348623157e+308.e16_6, '    0.179769+309');
        expect(1.1102230246251565e-16.e16_6, '    0.111022E-15');
      });

      test('D', () {
        expect((-10.0).d12_3, '  -0.100D+02');
        expect((-1.0).d12_3, '  -0.100D+01');
        expect((-0.0).d12_3, '  -0.000D+00');
        expect(0.0.d12_3, '   0.000D+00');
        expect(1.0.d12_3, '   0.100D+01');
        expect(10.0.d12_3, '   0.100D+02');
        expect(100.0.d12_3, '   0.100D+03');
        expect(1000.0.d12_3, '   0.100D+04');
        expect(10000.0.d12_3, '   0.100D+05');
        expect(100000.0.d12_3, '   0.100D+06');
        expect(1000000.0.d12_3, '   0.100D+07');
        expect(10000000.0.d12_3, '   0.100D+08');
        expect(100000000.0.d12_3, '   0.100D+09');
        expect(1.0e7.d12_3, '   0.100D+08');
        expect(1.0e8.d12_3, '   0.100D+09');
        expect(pi.d12_3, '   0.314D+01');
        expect((1 / 3).d12_3, '   0.333D+00');
        expect(1.1754943508e-38.d12_3, '   0.118D-37');
        expect(3.4028234664e38.d12_3, '   0.340D+39');
        expect(2.2250738585072014e-308.d16_6, '    0.222507-307');
        expect(1.7976931348623157e+308.d16_6, '    0.179769+309');
        expect(1.1102230246251565e-16.d16_6, '    0.111022D-15');
      });

      test('G', () {
        expect((-100.0).g12_3, '   -100.    ');
        expect((-10.0).g12_3, '   -10.0    ');
        expect((-1.0).g12_3, '   -1.00    ');
        expect((-0.1).g12_3, '  -0.100    ');
        expect((-0.01).g12_3, '  -0.100E-01');
        expect((-0.001).g12_3, '  -0.100E-02');
        expect((-0.0001).g12_3, '  -0.100E-03');
        expect((-1.0).g12_3, '   -1.00    ');
        expect((-0.0).g12_3, '   -0.00    ');
        expect(0.0.g12_3, '    0.00    ');
        expect(0.0001.g12_3, '   0.100E-03');
        expect(0.001.g12_3, '   0.100E-02');
        expect(0.01.g12_3, '   0.100E-01');
        expect(0.1.g12_3, '   0.100    ');
        expect(1.0.g12_3, '    1.00    ');
        expect(10.0.g12_3, '    10.0    ');
        expect(100.0.g12_3, '    100.    ');
        expect(1000.0.g12_3, '   0.100E+04');
        expect(10000.0.g12_3, '   0.100E+05');
        expect(100000.0.g12_3, '   0.100E+06');
        expect(1000000.0.g12_3, '   0.100E+07');
        expect(10000000.0.g12_3, '   0.100E+08');
        expect(100000000.0.g12_3, '   0.100E+09');
        expect(1.0e7.g12_3, '   0.100E+08');
        expect(1.0e8.g12_3, '   0.100E+09');
        expect(pi.g12_3, '    3.14    ');
        expect((1 / 3).g12_3, '   0.333    ');
        expect(1.1754943508e-38.g12_3, '   0.118E-37');
        expect(3.4028234664e38.g12_3, '   0.340E+39');
        expect(2.2250738585072014e-308.g16_6, '    0.222507-307');
        expect(1.7976931348623157e+308.g16_6, '    0.179769+309');
        expect(1.1102230246251565e-16.g16_6, '    0.111022E-15');
      });
    });
  });
}
