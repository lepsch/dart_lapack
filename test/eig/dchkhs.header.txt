*> \brief \b DCHKHS
*
*  =========== DOCUMENTATION ===========
*
* Online html documentation available at
*            http://www.netlib.org/lapack/explore-html/
*
*  Definition:
*  ===========
*
*       SUBROUTINE DCHKHS( NSIZES, NN, NTYPES, DOTYPE, ISEED, THRESH,
*                          NOUNIT, A, LDA, H, T1, T2, U, LDU, Z, UZ, WR1,
*                          WI1, WR2, WI2, WR3, WI3, EVECTL, EVECTR, EVECTY,
*                          EVECTX, UU, TAU, WORK, NWORK, IWORK, SELECT,
*                          RESULT, INFO )
*
*       .. Scalar Arguments ..
*       INTEGER            INFO, LDA, LDU, NOUNIT, NSIZES, NTYPES, NWORK
*       DOUBLE PRECISION   THRESH
*       ..
*       .. Array Arguments ..
*       LOGICAL            DOTYPE( * ), SELECT( * )
*       INTEGER            ISEED( 4 ), IWORK( * ), NN( * )
*       DOUBLE PRECISION   A( LDA, * ), EVECTL( LDU, * ),
*      $                   EVECTR( LDU, * ), EVECTX( LDU, * ),
*      $                   EVECTY( LDU, * ), H( LDA, * ), RESULT( 16 ),
*      $                   T1( LDA, * ), T2( LDA, * ), TAU( * ),
*      $                   U( LDU, * ), UU( LDU, * ), UZ( LDU, * ),
*      $                   WI1( * ), WI2( * ), WI3( * ), WORK( * ),
*      $                   WR1( * ), WR2( * ), WR3( * ), Z( LDU, * )
*       ..
*
*
*> \par Purpose:
*  =============
*>
*> \verbatim
*>
*>    DCHKHS  checks the nonsymmetric eigenvalue problem routines.
*>
*>            DGEHRD factors A as  U H U' , where ' means transpose,
*>            H is hessenberg, and U is an orthogonal matrix.
*>
*>            DORGHR generates the orthogonal matrix U.
*>
*>            DORMHR multiplies a matrix by the orthogonal matrix U.
*>
*>            DHSEQR factors H as  Z T Z' , where Z is orthogonal and
*>            T is "quasi-triangular", and the eigenvalue vector W.
*>
*>            DTREVC computes the left and right eigenvector matrices
*>            L and R for T. L is lower quasi-triangular, and R is
*>            upper quasi-triangular.
*>
*>            DHSEIN computes the left and right eigenvector matrices
*>            Y and X for H, using inverse iteration.
*>
*>            DTREVC3 computes left and right eigenvector matrices
*>            from a Schur matrix T and backtransforms them with Z
*>            to eigenvector matrices L and R for A. L and R are
*>            GE matrices.
*>
*>    When DCHKHS is called, a number of matrix "sizes" ("n's") and a
*>    number of matrix "types" are specified.  For each size ("n")
*>    and each type of matrix, one matrix will be generated and used
*>    to test the nonsymmetric eigenroutines.  For each matrix, 16
*>    tests will be performed:
*>
*>    (1)     | A - U H U**T | / ( |A| n ulp )
*>
*>    (2)     | I - UU**T | / ( n ulp )
*>
*>    (3)     | H - Z T Z**T | / ( |H| n ulp )
*>
*>    (4)     | I - ZZ**T | / ( n ulp )
*>
*>    (5)     | A - UZ H (UZ)**T | / ( |A| n ulp )
*>
*>    (6)     | I - UZ (UZ)**T | / ( n ulp )
*>
*>    (7)     | T(Z computed) - T(Z not computed) | / ( |T| ulp )
*>
*>    (8)     | W(Z computed) - W(Z not computed) | / ( |W| ulp )
*>
*>    (9)     | TR - RW | / ( |T| |R| ulp )
*>
*>    (10)    | L**H T - W**H L | / ( |T| |L| ulp )
*>
*>    (11)    | HX - XW | / ( |H| |X| ulp )
*>
*>    (12)    | Y**H H - W**H Y | / ( |H| |Y| ulp )
*>
*>    (13)    | AX - XW | / ( |A| |X| ulp )
*>
*>    (14)    | Y**H A - W**H Y | / ( |A| |Y| ulp )
*>
*>    (15)    | AR - RW | / ( |A| |R| ulp )
*>
*>    (16)    | LA - WL | / ( |A| |L| ulp )
*>
*>    The "sizes" are specified by an array NN(1:NSIZES); the value of
*>    each element NN(j) specifies one size.
*>    The "types" are specified by a logical array DOTYPE( 1:NTYPES );
*>    if DOTYPE(j) is .TRUE., then matrix type "j" will be generated.
*>    Currently, the list of possible types is:
*>
*>    (1)  The zero matrix.
*>    (2)  The identity matrix.
*>    (3)  A (transposed) Jordan block, with 1's on the diagonal.
*>
*>    (4)  A diagonal matrix with evenly spaced entries
*>         1, ..., ULP  and random signs.
*>         (ULP = (first number larger than 1) - 1 )
*>    (5)  A diagonal matrix with geometrically spaced entries
*>         1, ..., ULP  and random signs.
*>    (6)  A diagonal matrix with "clustered" entries 1, ULP, ..., ULP
*>         and random signs.
*>
*>    (7)  Same as (4), but multiplied by SQRT( overflow threshold )
*>    (8)  Same as (4), but multiplied by SQRT( underflow threshold )
*>
*>    (9)  A matrix of the form  U' T U, where U is orthogonal and
*>         T has evenly spaced entries 1, ..., ULP with random signs
*>         on the diagonal and random O(1) entries in the upper
*>         triangle.
*>
*>    (10) A matrix of the form  U' T U, where U is orthogonal and
*>         T has geometrically spaced entries 1, ..., ULP with random
*>         signs on the diagonal and random O(1) entries in the upper
*>         triangle.
*>
*>    (11) A matrix of the form  U' T U, where U is orthogonal and
*>         T has "clustered" entries 1, ULP,..., ULP with random
*>         signs on the diagonal and random O(1) entries in the upper
*>         triangle.
*>
*>    (12) A matrix of the form  U' T U, where U is orthogonal and
*>         T has real or complex conjugate paired eigenvalues randomly
*>         chosen from ( ULP, 1 ) and random O(1) entries in the upper
*>         triangle.
*>
*>    (13) A matrix of the form  X' T X, where X has condition
*>         SQRT( ULP ) and T has evenly spaced entries 1, ..., ULP
*>         with random signs on the diagonal and random O(1) entries
*>         in the upper triangle.
*>
*>    (14) A matrix of the form  X' T X, where X has condition
*>         SQRT( ULP ) and T has geometrically spaced entries
*>         1, ..., ULP with random signs on the diagonal and random
*>         O(1) entries in the upper triangle.
*>
*>    (15) A matrix of the form  X' T X, where X has condition
*>         SQRT( ULP ) and T has "clustered" entries 1, ULP,..., ULP
*>         with random signs on the diagonal and random O(1) entries
*>         in the upper triangle.
*>
*>    (16) A matrix of the form  X' T X, where X has condition
*>         SQRT( ULP ) and T has real or complex conjugate paired
*>         eigenvalues randomly chosen from ( ULP, 1 ) and random
*>         O(1) entries in the upper triangle.
*>
*>    (17) Same as (16), but multiplied by SQRT( overflow threshold )
*>    (18) Same as (16), but multiplied by SQRT( underflow threshold )
*>
*>    (19) Nonsymmetric matrix with random entries chosen from (-1,1).
*>    (20) Same as (19), but multiplied by SQRT( overflow threshold )
*>    (21) Same as (19), but multiplied by SQRT( underflow threshold )
*> \endverbatim
*
*  Arguments:
*  ==========
*
*> \verbatim
*>  NSIZES - INTEGER
*>           The number of sizes of matrices to use.  If it is zero,
*>           DCHKHS does nothing.  It must be at least zero.
*>           Not modified.
*>
*>  NN     - INTEGER array, dimension (NSIZES)
*>           An array containing the sizes to be used for the matrices.
*>           Zero values will be skipped.  The values must be at least
*>           zero.
*>           Not modified.
*>
*>  NTYPES - INTEGER
*>           The number of elements in DOTYPE.   If it is zero, DCHKHS
*>           does nothing.  It must be at least zero.  If it is MAXTYP+1
*>           and NSIZES is 1, then an additional type, MAXTYP+1 is
*>           defined, which is to use whatever matrix is in A.  This
*>           is only useful if DOTYPE(1:MAXTYP) is .FALSE. and
*>           DOTYPE(MAXTYP+1) is .TRUE. .
*>           Not modified.
*>
*>  DOTYPE - LOGICAL array, dimension (NTYPES)
*>           If DOTYPE(j) is .TRUE., then for each size in NN a
*>           matrix of that size and of type j will be generated.
*>           If NTYPES is smaller than the maximum number of types
*>           defined (PARAMETER MAXTYP), then types NTYPES+1 through
*>           MAXTYP will not be generated.  If NTYPES is larger
*>           than MAXTYP, DOTYPE(MAXTYP+1) through DOTYPE(NTYPES)
*>           will be ignored.
*>           Not modified.
*>
*>  ISEED  - INTEGER array, dimension (4)
*>           On entry ISEED specifies the seed of the random number
*>           generator. The array elements should be between 0 and 4095;
*>           if not they will be reduced mod 4096.  Also, ISEED(4) must
*>           be odd.  The random number generator uses a linear
*>           congruential sequence limited to small integers, and so
*>           should produce machine independent random numbers. The
*>           values of ISEED are changed on exit, and can be used in the
*>           next call to DCHKHS to continue the same random number
*>           sequence.
*>           Modified.
*>
*>  THRESH - DOUBLE PRECISION
*>           A test will count as "failed" if the "error", computed as
*>           described above, exceeds THRESH.  Note that the error
*>           is scaled to be O(1), so THRESH should be a reasonably
*>           small multiple of 1, e.g., 10 or 100.  In particular,
*>           it should not depend on the precision (single vs. double)
*>           or the size of the matrix.  It must be at least zero.
*>           Not modified.
*>
*>  NOUNIT - INTEGER
*>           The FORTRAN unit number for printing out error messages
*>           (e.g., if a routine returns IINFO not equal to 0.)
*>           Not modified.
*>
*>  A      - DOUBLE PRECISION array, dimension (LDA,max(NN))
*>           Used to hold the matrix whose eigenvalues are to be
*>           computed.  On exit, A contains the last matrix actually
*>           used.
*>           Modified.
*>
*>  LDA    - INTEGER
*>           The leading dimension of A, H, T1 and T2.  It must be at
*>           least 1 and at least max( NN ).
*>           Not modified.
*>
*>  H      - DOUBLE PRECISION array, dimension (LDA,max(NN))
*>           The upper hessenberg matrix computed by DGEHRD.  On exit,
*>           H contains the Hessenberg form of the matrix in A.
*>           Modified.
*>
*>  T1     - DOUBLE PRECISION array, dimension (LDA,max(NN))
*>           The Schur (="quasi-triangular") matrix computed by DHSEQR
*>           if Z is computed.  On exit, T1 contains the Schur form of
*>           the matrix in A.
*>           Modified.
*>
*>  T2     - DOUBLE PRECISION array, dimension (LDA,max(NN))
*>           The Schur matrix computed by DHSEQR when Z is not computed.
*>           This should be identical to T1.
*>           Modified.
*>
*>  LDU    - INTEGER
*>           The leading dimension of U, Z, UZ and UU.  It must be at
*>           least 1 and at least max( NN ).
*>           Not modified.
*>
*>  U      - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           The orthogonal matrix computed by DGEHRD.
*>           Modified.
*>
*>  Z      - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           The orthogonal matrix computed by DHSEQR.
*>           Modified.
*>
*>  UZ     - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           The product of U times Z.
*>           Modified.
*>
*>  WR1    - DOUBLE PRECISION array, dimension (max(NN))
*>  WI1    - DOUBLE PRECISION array, dimension (max(NN))
*>           The real and imaginary parts of the eigenvalues of A,
*>           as computed when Z is computed.
*>           On exit, WR1 + WI1*i are the eigenvalues of the matrix in A.
*>           Modified.
*>
*>  WR2    - DOUBLE PRECISION array, dimension (max(NN))
*>  WI2    - DOUBLE PRECISION array, dimension (max(NN))
*>           The real and imaginary parts of the eigenvalues of A,
*>           as computed when T is computed but not Z.
*>           On exit, WR2 + WI2*i are the eigenvalues of the matrix in A.
*>           Modified.
*>
*>  WR3    - DOUBLE PRECISION array, dimension (max(NN))
*>  WI3    - DOUBLE PRECISION array, dimension (max(NN))
*>           Like WR1, WI1, these arrays contain the eigenvalues of A,
*>           but those computed when DHSEQR only computes the
*>           eigenvalues, i.e., not the Schur vectors and no more of the
*>           Schur form than is necessary for computing the
*>           eigenvalues.
*>           Modified.
*>
*>  EVECTL - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           The (upper triangular) left eigenvector matrix for the
*>           matrix in T1.  For complex conjugate pairs, the real part
*>           is stored in one row and the imaginary part in the next.
*>           Modified.
*>
*>  EVEZTR - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           The (upper triangular) right eigenvector matrix for the
*>           matrix in T1.  For complex conjugate pairs, the real part
*>           is stored in one column and the imaginary part in the next.
*>           Modified.
*>
*>  EVECTY - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           The left eigenvector matrix for the
*>           matrix in H.  For complex conjugate pairs, the real part
*>           is stored in one row and the imaginary part in the next.
*>           Modified.
*>
*>  EVECTX - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           The right eigenvector matrix for the
*>           matrix in H.  For complex conjugate pairs, the real part
*>           is stored in one column and the imaginary part in the next.
*>           Modified.
*>
*>  UU     - DOUBLE PRECISION array, dimension (LDU,max(NN))
*>           Details of the orthogonal matrix computed by DGEHRD.
*>           Modified.
*>
*>  TAU    - DOUBLE PRECISION array, dimension(max(NN))
*>           Further details of the orthogonal matrix computed by DGEHRD.
*>           Modified.
*>
*>  WORK   - DOUBLE PRECISION array, dimension (NWORK)
*>           Workspace.
*>           Modified.
*>
*>  NWORK  - INTEGER
*>           The number of entries in WORK.  NWORK >= 4*NN(j)*NN(j) + 2.
*>
*>  IWORK  - INTEGER array, dimension (max(NN))
*>           Workspace.
*>           Modified.
*>
*>  SELECT - LOGICAL array, dimension (max(NN))
*>           Workspace.
*>           Modified.
*>
*>  RESULT - DOUBLE PRECISION array, dimension (16)
*>           The values computed by the fourteen tests described above.
*>           The values are currently limited to 1/ulp, to avoid
*>           overflow.
*>           Modified.
*>
*>  INFO   - INTEGER
*>           If 0, then everything ran OK.
*>            -1: NSIZES < 0
*>            -2: Some NN(j) < 0
*>            -3: NTYPES < 0
*>            -6: THRESH < 0
*>            -9: LDA < 1 or LDA < NMAX, where NMAX is max( NN(j) ).
*>           -14: LDU < 1 or LDU < NMAX.
*>           -28: NWORK too small.
*>           If  DLATMR, SLATMS, or SLATME returns an error code, the
*>               absolute value of it is returned.
*>           If 1, then DHSEQR could not find all the shifts.
*>           If 2, then the EISPACK code (for small blocks) failed.
*>           If >2, then 30*N iterations were not enough to find an
*>               eigenvalue or to decompose the problem.
*>           Modified.
*>
*>-----------------------------------------------------------------------
*>
*>     Some Local Variables and Parameters:
*>     ---- ----- --------- --- ----------
*>
*>     ZERO, ONE       Real 0 and 1.
*>     MAXTYP          The number of types defined.
*>     MTEST           The number of tests defined: care must be taken
*>                     that (1) the size of RESULT, (2) the number of
*>                     tests actually performed, and (3) MTEST agree.
*>     NTEST           The number of tests performed on this matrix
*>                     so far.  This should be less than MTEST, and
*>                     equal to it by the last test.  It will be less
*>                     if any of the routines being tested indicates
*>                     that it could not compute the matrices that
*>                     would be tested.
*>     NMAX            Largest value in NN.
*>     NMATS           The number of matrices generated so far.
*>     NERRS           The number of tests which have exceeded THRESH
*>                     so far (computed by DLAFTS).
*>     COND, CONDS,
*>     IMODE           Values to be passed to the matrix generators.
*>     ANORM           Norm of A; passed to matrix generators.
*>
*>     OVFL, UNFL      Overflow and underflow thresholds.
*>     ULP, ULPINV     Finest relative precision and its inverse.
*>     RTOVFL, RTUNFL,
*>     RTULP, RTULPI   Square roots of the previous 4 values.
*>
*>             The following four arrays decode JTYPE:
*>     KTYPE(j)        The general type (1-10) for type "j".
*>     KMODE(j)        The MODE value to be passed to the matrix
*>                     generator for type "j".
*>     KMAGN(j)        The order of magnitude ( O(1),
*>                     O(overflow^(1/2) ), O(underflow^(1/2) )
*>     KCONDS(j)       Selects whether CONDS is to be 1 or
*>                     1/sqrt(ulp).  (0 means irrelevant.)
*> \endverbatim
*
*  Authors:
*  ========
*
*> \author Univ. of Tennessee
*> \author Univ. of California Berkeley
*> \author Univ. of Colorado Denver
*> \author NAG Ltd.
*
*> \ingroup double_eig
*
*  =====================================================================